import { useEffect, useMemo, useState } from 'react';
import { Link, useNavigate, useParams } from 'react-router-dom';
import type { CustomArrowProps, Settings } from 'react-slick';
import Slider from 'react-slick';
import '../css/productDetail.css';
import 'slick-carousel/slick/slick.css';
import 'slick-carousel/slick/slick-theme.css';
import { Heart } from "lucide-react";
import { useChatContext } from "../contexts/ChatContext";
import Select from "react-select";
import ReserveModal from "../components/ReserveModal";
import CompleteModal from "../components/CompleteModal";
import { useFavorites } from "../contexts/useFavorites";
import Toast from "../components/common/Toast";
import PurchaseSlider from "../components/PurchaseSlider";
import DeliverySlider, {type DeliveryInfo} from "../components/DeliverySlider.tsx";
import {useAuth} from "../contexts/useAuth.ts";

type ItemStatus =
    | 'ON_SALE'
    | 'RESERVED'
    | 'SOLD_OUT';


type ShippingOption = 'included' | 'separate';

interface DealInfo {
    parcel?: boolean;
    direct?: boolean;
    safeTrade?: boolean;
    shippingOption?: ShippingOption;
    phoneNumber?: string | null;
}
interface ImageDto {
    id: number;
    url: string;
}
interface ItemDetail {
    id: number;
    userId: number;
    title: string;
    price: number;
    description: string;
    category: string;
    createdDate: string;
    itemStatus: ItemStatus;
    condition: string;
    status?: string;
    imageUrl?: string;
    images?: ImageDto[];
    dealInfo?: DealInfo;
    modified?: boolean;
    updatedDate?: string;
    viewCount: number;
    chatRoomCount: number;
    latitude?: number;
    longitude?: number;
}

interface User {
    id: number;
    name: string;
    email: string;
}

const API_BASE = import.meta?.env?.VITE_API_BASE || '';

function PrevArrow({ className, style, onClick }: CustomArrowProps) {
    return <div className={className} style={{ ...style, display: 'block', left: 20, zIndex: 1 }} onClick={onClick} />;
}

function NextArrow({ className, style, onClick }: CustomArrowProps) {
    return <div className={className} style={{ ...style, display: 'block', right: 20, zIndex: 1 }} onClick={onClick} />;
}

export default function ProductDetailSimple() {
    const { id } = useParams();
    const [item, setItem] = useState<ItemDetail | null>(null);
    const [loading, setLoading] = useState(true);
    const [err, setErr] = useState<string | null>(null);

    const [currentUser, setCurrentUser] = useState<User | null>(null);
    const [isFavorite, setIsFavorite] = useState(false);
    const [favoriteCount, setFavoriteCount] = useState(0);

    // Î™®Îã¨ ÏÉÅÌÉú
    const [showReserveModal, setShowReserveModal] = useState(false);
    const [showCompleteModal, setShowCompleteModal] = useState(false);
    const [showPurchaseSlider, setShowPurchaseSlider] = useState(false);
    const [showDeliverySlider, setShowDeliverySlider] = useState(false);

    const navigate = useNavigate();
    const { openChat } = useChatContext();
    const { addFavorite, removeFavorite } = useFavorites();
    const [toastMsg, setToastMsg] = useState<string | null>(null);

    const [presetMessage, setPresetMessage] = useState<string>("");


    useEffect(() => {
        if (!id) return;
        (async () => {
            const res = await fetch(`${API_BASE}/api/items/${id}`, { credentials: "include" });
            if (!res.ok) return;

            const data = await res.json();
            console.log("‚úÖ ÏÉÅÏÑ∏ API ÏùëÎãµ:", data);   // ‚Üê Ï†ÑÏ≤¥ ÌôïÏù∏
            console.log("‚úÖ hasSafeOrder:", data.hasSafeOrder); // ‚Üê ÌîåÎûòÍ∑∏Îßå ÌôïÏù∏

            setItem(data);

            // üö® ÏïàÏ†ÑÍ±∞Îûò ÏÉÅÌíàÏù∏Îç∞ ÏùºÎ∞ò ÏÉÅÏÑ∏Î°ú Îì§Ïñ¥ÏôîÏùÑ Í≤ΩÏö∞
            if (data.hasSafeOrder && location.pathname.startsWith("/items/")) {
                navigate(`/safe-items/${id}`, { replace: true });
            }
        })();
    }, [id, navigate, location]);

    // ‚úÖ Îç∞Ïù¥ÌÑ∞ Î°úÎî©
    useEffect(() => {
        if (!id) return;
        let aborted = false;

        (async () => {
            try {
                setLoading(true);
                setErr(null);

                // ÏÉÅÌíà ÏÉÅÏÑ∏
                const r = await fetch(`${API_BASE}/api/items/${id}`, { credentials: 'include' });
                if (!r.ok) throw new Error(await r.text());
                const data = (await r.json()) as ItemDetail;
                if (!aborted) setItem(data);
                console.log("Îç∞Ïù¥ÌÉÄ",data);
                // Í¥ÄÏã¨ Ïó¨Î∂Ä
                const f = await fetch(`${API_BASE}/api/favorites/${id}`, { credentials: 'include' });
                if (f.ok) {
                    const fav = await f.json();
                    if (!aborted) {
                        setIsFavorite(fav.isFavorite);
                        setFavoriteCount(fav.favoriteCount ?? 0);
                    }
                }

                // Î°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
                const me = await fetch(`${API_BASE}/api/main`, { credentials: 'include' });
                if (me.ok) {
                    const user = (await me.json()) as User;
                    if (!aborted) setCurrentUser(user);
                }
            } catch (e) {
                if (!aborted) setErr(e instanceof Error ? e.message : 'ÏöîÏ≤≠ Ïã§Ìå®');
            } finally {
                if (!aborted) setLoading(false);
            }
        })();

        return () => {
            aborted = true;
        };
    }, [id]);

    // ‚ù§Ô∏è Í¥ÄÏã¨ÏÉÅÌíà ÌÜ†Í∏Ä
    const toggleFavorite = async () => {
        if (!id) return;
        try {
            const res = await fetch(`${API_BASE}/api/favorites/${id}/toggle`, {
                method: "POST",
                credentials: "include",
            });
            if (!res.ok) throw new Error(await res.text());
            const data = await res.json();

            setIsFavorite(data.isFavorite);
            setFavoriteCount(data.favoriteCount);

            if (data.isFavorite) {
                addFavorite(Number(id));
                setToastMsg("Í¥ÄÏã¨ÏÉÅÌíàÏóê Îì±Î°ùÎêòÏóàÏäµÎãàÎã§");
            } else {
                removeFavorite(Number(id));
                setToastMsg("Í¥ÄÏã¨ÏÉÅÌíàÏù¥ Ìï¥Ï†úÎêòÏóàÏäµÎãàÎã§");
            }
            setTimeout(() => setToastMsg(null), 2000);
        } catch {
            alert("Í¥ÄÏã¨ÏÉÅÌíà Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }
    };

    // ÏÉÅÌíà ÏÇ≠Ï†ú
    const handleDelete = async () => {
        if (!id) return;
        if (!window.confirm('Ï†ïÎßêÎ°ú Ïù¥ ÏÉÅÌíàÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) return;

        try {
            const res = await fetch(`${API_BASE}/api/items/${id}`, {
                method: 'DELETE',
                credentials: 'include',
            });
            if (res.ok) {
                alert('ÏÉÅÌíàÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
                navigate('/');
            } else {
                alert('ÏÇ≠Ï†ú Ïã§Ìå®');
            }
        } catch {
            alert('ÏÇ≠Ï†ú Ï§ë Ïò§Î•ò Î∞úÏÉù');
        }
    };

    // Ï±ÑÌåÖ ÏãúÏûë
    const handleStartChat = async () => {
        if (!id || !currentUser || !item) return;

        if (currentUser.id === item.userId) {
            openChat();
            return;
        }

        try {
            const res = await fetch(`${API_BASE}/api/chat/room?itemId=${id}`, {
                method: "POST",
                credentials: "include",
            });
            if (res.ok) {
                const room = await res.json();
                openChat(room.roomId);
                setPresetMessage(presetMessage || "");
            } else {
                alert("Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± Ïã§Ìå®");
            }
        } catch (err) {
            console.error("Ï±ÑÌåÖ ÏãúÏûë Ïã§Ìå®:", err);
        }
    };

    // ÏòàÏïΩ ÌôïÏ†ï
    const handleReserveConfirm = async (roomId: number, buyerId: number) => {
        if (!id) return;
        try {
            const res = await fetch(`${API_BASE}/api/items/${id}/reserve`, {
                method: "POST",
                credentials: "include",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ roomId, buyerId }),
            });
            if (!res.ok) throw new Error("ÏòàÏïΩ Ïã§Ìå®");
            setItem({ ...item!, itemStatus: "RESERVED" });
            setShowReserveModal(false);
            alert("ÏòàÏïΩÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.");
        } catch {
            alert("ÏòàÏïΩ Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }
    };

    // Í±∞Îûò ÏôÑÎ£å ÌôïÏ†ï
    const handleCompleteConfirm = async (roomId: number, buyerId: number) => {
        if (!id) return;
        try {
            const res = await fetch(`${API_BASE}/api/items/${id}/complete`, {
                method: "POST",
                credentials: "include",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ roomId, buyerId }),
            });
            if (!res.ok) throw new Error("Í±∞ÎûòÏôÑÎ£å Ïã§Ìå®");
            setItem({ ...item!, itemStatus: "SOLD_OUT" });
            setShowCompleteModal(false);
            alert("Í±∞ÎûòÍ∞Ä ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.");
        } catch {
            alert("Í±∞ÎûòÏôÑÎ£å Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }
    };

    const { refreshUser } = useAuth();

    // Î∞∞ÏÜ°Ï†ïÎ≥¥ Ï†úÏ∂ú ‚Üí ÏïàÏ†ÑÍ±∞Îûò Ï£ºÎ¨∏ API Ìò∏Ï∂ú
    const handleDeliverySubmit = async (delivery: DeliveryInfo) => {
        if (!item) return;
        try {
            const res = await fetch(`${API_BASE}/api/orders/safe`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                credentials: "include",
                body: JSON.stringify({
                    itemId: item.id,
                    deliveryInfo: delivery,
                }),
            });

            if (res.ok) {
                setShowDeliverySlider(false);
                await refreshUser();
                navigate(`/safe-items/${item.id}`, { replace: true });
            } else {
                alert("Í≤∞Ï†ú Ïã§Ìå®");
            }
        } catch (e) {
            console.error(e);
            alert("Í≤∞Ï†ú Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò Î∞úÏÉù");
        }
    };

    const images = useMemo(() => {
        if (!item) return [];
        if (Array.isArray(item.images) && item.images.length > 0) {
            return item.images.map(img => img.url);
        }
        return item?.imageUrl ? [item.imageUrl] : [];
    }, [item]);

    const sliderSettings: Settings = {
        dots: true,
        infinite: true,
        autoplay: true,
        autoplaySpeed: 3000,
        pauseOnHover: true,
        speed: 500,
        slidesToShow: 1,
        slidesToScroll: 1,
        arrows: true,
        prevArrow: <PrevArrow />,
        nextArrow: <NextArrow />,
        adaptiveHeight: true,
        responsive: [{ breakpoint: 768, settings: { arrows: false, dots: true } }],
    };

    if (loading) return <div className="detail-loading">Î°úÎî© Ï§ë‚Ä¶</div>;
    if (err) return <div className="detail-loading" style={{ color: 'crimson' }}>ÏóêÎü¨: {err}</div>;
    if (!item) return <div className="detail-loading">Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.</div>;

    return (
        <div className="detail-container">
            {/* Î∏åÎ†àÎìúÌÅ¨Îüº */}
            <nav className="breadcrumb">
                <Link to="/">Ìôà</Link>
                <span>&gt;</span>
                <Link to="/category">{item.category}</Link>
                <span>&gt;</span>
                <span>{item.title}</span>
            </nav>

            <div className="detail-main">
                {/* Ïù¥ÎØ∏ÏßÄ Ïä¨ÎùºÏù¥Îçî */}
                <div className="detail-slider">
                    {images.length > 0 ? (
                        <Slider {...sliderSettings}>
                            {images.map((url, idx) => (
                                <div key={idx} className="image-wrapper">
                                    <img src={url} alt={`${item.title} ${idx + 1}`} className="slide-image" />
                                </div>
                            ))}
                        </Slider>
                    ) : (
                        <div className="image-wrapper">
                            <div className="slide-image" style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', color: '#888' }}>
                                Ïù¥ÎØ∏ÏßÄÍ∞Ä ÏóÜÏäµÎãàÎã§
                            </div>
                        </div>
                    )}
                </div>

                {/* ÏÉÅÌíà Ï†ïÎ≥¥ */}
                <div className="detail-info">
                    <h1 className="detail-title">
                        {item.itemStatus === "RESERVED" && <span className="detail-status-badge detail-status-badge-reserved">ÏòàÏïΩÏ§ë</span>}
                        {item.itemStatus === "SOLD_OUT" && <span className="detail-status-badge detail-status-badge-sold">ÌåêÎß§ÏôÑÎ£å</span>}
                        {item.title}
                    </h1>

                    <p className="detail-price">{item.price.toLocaleString()}Ïõê</p>

                    <div className="detail-meta">
                        <span>{new Date(item.createdDate).toLocaleDateString()}</span>
                        <span> ¬∑ </span>
                        <span>Ï°∞Ìöå {item.viewCount}</span>
                        <span> ¬∑ </span>
                        <span>Ï±ÑÌåÖ {item.chatRoomCount}</span>
                        <span> ¬∑ </span>
                        <span>Ï∞ú {favoriteCount}</span>
                    </div>

                    <div className="detail-row">
                        <span className="label">Í±∞ÎûòÎ∞©Î≤ï</span>
                        <span className="value">
                            {[
                                item.dealInfo?.parcel &&
                                (item.dealInfo.shippingOption === 'separate' ? 'ÌÉùÎ∞∞Í±∞Îûò (Î∞∞ÏÜ°ÎπÑ Î≥ÑÎèÑ)' : 'ÌÉùÎ∞∞Í±∞Îûò (Î∞∞ÏÜ°ÎπÑ Ìè¨Ìï®)'),
                                item.dealInfo?.direct && 'ÏßÅÍ±∞Îûò',
                                item.dealInfo?.safeTrade && 'üîí ÏïàÏ†ÑÍ±∞Îûò',
                            ].filter(Boolean).join(' ¬∑ ')}
                        </span>
                    </div>

                    <div className="detail-row">
                        <span className="label">ÏÉÅÌíàÏÉÅÌÉú</span>
                        <span className="value">{item.condition ?? 'ÏÉÅÌÉú ÎØ∏Í∏∞Ïû¨'} {item.status ?? ''}</span>
                    </div>

                    <div className="detail-row description-row">
                        <span className="label">ÏÉÅÌíàÏÑ§Î™Ö</span>
                        <div className="value">
                            {(item.description || '').split('\n').map((line, i) => <p key={i}>{line}</p>)}
                        </div>
                    </div>

                    {/* Ïï°ÏÖò Î≤ÑÌäº */}
                    <div className="action-buttons">
                        <button onClick={toggleFavorite} className="btn-fav">
                            {isFavorite ? (
                                <Heart fill="red" stroke="red" size={28} />
                            ) : (
                                <Heart stroke="black" size={28} strokeWidth={1} />
                            )}
                        </button>

                        {currentUser && item.userId === currentUser.id ? (
                            <button onClick={handleStartChat} className="btn-chat full-width">
                                Ï±ÑÌåÖÌïòÍ∏∞
                            </button>
                        ) : (
                            <>
                                <button onClick={handleStartChat} className="btn-chat">
                                    Ï±ÑÌåÖÌïòÍ∏∞
                                </button>

                                {item.itemStatus === "SOLD_OUT" ? (
                                    <button className="btn-buy disabled" disabled>
                                        ÌåêÎß§ÏôÑÎ£å
                                    </button>
                                ) : item.itemStatus === "RESERVED" ? (
                                    <button
                                        className="btn-buy reserved"
                                        onClick={handleStartChat}
                                    >
                                        ÏòàÏïΩÏ§ë
                                    </button>
                                ) : (
                                    <button
                                        className="btn-buy"
                                        onClick={() => setShowPurchaseSlider(true)}
                                    >
                                        Íµ¨Îß§ÌïòÍ∏∞
                                    </button>
                                )}
                            </>
                        )}
                    </div>


                    {/* ÌåêÎß§Ïûê Ï†ÑÏö© Î≤ÑÌäº */}
                    {currentUser && item.userId === currentUser.id && (
                        <div className="owner-actions">
                            <div className="owner-status">
                                <span className="status-label">ÏÉÅÌíà ÌåêÎß§ÏÉÅÌÉú</span>
                                <Select
                                    options={[
                                        { value: "ON_SALE", label: "ÌåêÎß§Ï§ë" },
                                        { value: "RESERVED", label: "ÏòàÏïΩÏ§ë" },
                                        { value: "SOLD_OUT", label: "Í±∞ÎûòÏôÑÎ£å" },
                                    ]}
                                    value={{
                                        value: item.itemStatus,
                                        label: item.itemStatus === "ON_SALE" ? "ÌåêÎß§Ï§ë" : item.itemStatus === "RESERVED" ? "ÏòàÏïΩÏ§ë" : "Í±∞ÎûòÏôÑÎ£å",
                                    }}
                                    onChange={async (selected) => {
                                        if (!selected) return;
                                        if (selected.value === "RESERVED") {
                                            setShowReserveModal(true);
                                            return;
                                        }
                                        if (selected.value === "SOLD_OUT") {
                                            setShowCompleteModal(true);
                                            return;
                                        }
                                        await fetch(`${API_BASE}/api/items/${item.id}/status?status=${selected.value}`, {
                                            method: "PATCH",
                                            credentials: "include",
                                        });
                                        setItem({ ...item, itemStatus: selected.value as ItemStatus });
                                    }}
                                    isSearchable={false}
                                />
                            </div>

                            <button className="btn-edit-link" onClick={() => navigate(`/items/${item.id}/edit`)}>‚úèÔ∏è ÏàòÏ†ïÌïòÍ∏∞</button>
                            <button className="btn-delete" onClick={handleDelete}>üóë ÏÇ≠Ï†úÌïòÍ∏∞</button>
                        </div>
                    )}
                </div>
            </div>

            {showReserveModal && (
                <ReserveModal
                    itemId={item.id}
                    onClose={() => setShowReserveModal(false)}
                    onConfirm={handleReserveConfirm}
                />
            )}
            {showCompleteModal && (
                <CompleteModal
                    itemId={item.id}
                    onClose={() => setShowCompleteModal(false)}
                    onConfirm={handleCompleteConfirm}
                />
            )}
            <PurchaseSlider
                isOpen={showPurchaseSlider}
                onClose={() => setShowPurchaseSlider(false)}
                price={item.price}
                dealInfo={item.dealInfo || {}}
                latitude={item.latitude}
                longitude={item.longitude}
                onChatStart={async (presetMessage) => {
                    if (!id) return;
                    try {
                        const res = await fetch(`${API_BASE}/api/chat/room?itemId=${id}`, {
                            method: "POST",
                            credentials: "include",
                        });
                        if (!res.ok) {
                            console.error("Ï±ÑÌåÖÎ∞© ÏÉùÏÑ± Ïã§Ìå®", await res.text());
                            return;
                        }
                        const room = await res.json();
                        if (presetMessage) {
                            sessionStorage.setItem(`chat:preset:${room.roomId}`, presetMessage);
                        }
                        openChat(room.roomId);
                    } catch (e) {
                        console.error("Ï±ÑÌåÖ ÏãúÏûë Ïã§Ìå®:", e);
                    }
                }}
                onPaymentStart={() => {
                    setShowPurchaseSlider(false);
                    setShowDeliverySlider(true);
                }}
            />
            <DeliverySlider
                isOpen={showDeliverySlider}
                onClose={() => setShowDeliverySlider(false)}
                price={item.price}
                shippingFee={item.dealInfo?.shippingOption === "separate" ? 3000 : 0}
                safeFee={Math.round(item.price * 0.035)}
                onSubmit={handleDeliverySubmit}
            />
            <Toast message={toastMsg} />
        </div>
    );
}
