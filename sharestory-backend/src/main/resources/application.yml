server:
  port: 8081

app:
  ## 프론트 도메인 (Vite dev 서버)
  frontend-url: "http://43.201.67.84"
  ## JWT 설정 (반드시 긴 랜덤값으로, 환경변수 주입 권장)
  jwt:
    secret: ${APP_JWT_SECRET}               # 512bit 이상 랜덤 시크릿
    access-exp-seconds: 1800       # 30분
    refresh-exp-seconds: 1209600           # 14일

  ## 쿠키 설정 (로컬: Lax/secure=false, 배포: None/secure=true + HTTPS)
  cookie:
    domain: "43.201.67.84"
    secure: false
    same-site: Lax

spring:

  data:
    redis:
      host: redis
      port: 6379

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 10MB

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope: email, profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: Google
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            client-name: Naver
            scope: name, email
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET:}  # 선택
            client-authentication-method: client_secret_post
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            scope: profile_nickname, account_email, profile_image
            client-name: Kakao
        provider:
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id


  kakao:
    rest-key: ${KAKAO_REST_KEY}

  jpa:
    database-platform: org.hibernate.dialect.MySQL8Dialect
    open-in-view: false
    show-sql: true
    hibernate:
      ddl-auto: update

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}                # root -> 환경변수
    password: ${DB_PASSWORD}                # 1234 -> 환경변수

  thymeleaf:
    prefix: classpath:/templates/
    suffix: .html

  messages:
    basename: messages
    encoding: UTF-8


  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.http.client.HttpClientAutoConfiguration
      - org.springframework.boot.autoconfigure.web.client.RestClientAutoConfiguration


cloud:
  aws:
    region:
      static: ap-northeast-2     # ✅ 리전은 여기
    s3:
      bucket: ${AWS_S3_BUCKET}
    credentials:
      access-key: ${AWS_ACCESS_KEY_ID}
      secret-key: ${AWS_SECRET_ACCESS_KEY}

  data:
    elasticsearch:
      client:
        reactive:
          endpoints: es:9200


  task:
    scheduling:
      pool:
        size: 1

openai:
  api:
    key: ${OPENAI_API_KEY}                  # 노출된 키 즉시 회수 후 환경변수로

logging:
  level:
    org.springframework.security: INFO
    org.hibernate.SQL: INFO
    org.springframework.web: DEBUG
    org.springframework.web.socket: DEBUG
    org.springframework.messaging: DEBUG
    com.sharestory.sharestory_backend.config.StompAuthInterceptor: DEBUG
    com.sharestory.sharestory_backend.security.JwtService: DEBUG

management:
  endpoints:
    web:
      exposure:
        include: health,info,env


iamport:
  api:
    key: ${IAMPORT_API_KEY}
    secret: ${IAMPORT_API_SECRET}

